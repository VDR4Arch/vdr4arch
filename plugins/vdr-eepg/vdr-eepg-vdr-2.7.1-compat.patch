--- a/eepg.c
+++ b/eepg.c
@@ -1324,12 +1324,12 @@ void cFilterEEPG::WriteToSchedule(tChannelID channelID, cSchedules* pSchedules,
   cEvent *Event = NULL;
   if (ps/*[eq]*/) {
 
-      Event = (cEvent *) ps->GetEvent (EventId); //since Nagra uses consistent EventIds, try this first
+      Event = (cEvent *) ps->GetEventById (EventId); //since Nagra uses consistent EventIds, try this first
       bool TableIdMatches = false;
       if (Event)
         TableIdMatches = (Event->TableID() == TableId);
       if (!Event || !TableIdMatches || abs(Event->StartTime() - (time_t) StartTime) > Duration * 60) //if EventId does not match, or it matched with wrong TableId, then try with StartTime
-        Event = (cEvent *) ps->GetEvent (EventId, StartTime);
+        Event = (cEvent *) ps->GetEventByTime (StartTime);
   }
   cEvent *newEvent = NULL;
   if (!Event) {  //event is new
@@ -3477,7 +3477,7 @@ void cFilterEEPG::ProcessPremiere(const u_char *& Data)
               }
 
               bool newEvent = false;
-              cEvent *pEvent = (cEvent *) pSchedule->GetEvent (EventId, -1);
+              cEvent *pEvent = (cEvent *) pSchedule->GetEventByTime (-1);
               if (!pEvent) {
                 LogI(2, "(new)\n");
                 pEvent = new cEvent (EventId);
--- a/eit2.c
+++ b/eit2.c
@@ -32,7 +32,7 @@ cEvent* cEIT2::ProcessEitEvent(cSchedule* pSchedule,const SI::EIT::Event* EitEve
   //    int versionNumber = getVersionNumber();
 
   cEvent *newEvent = NULL;
-  cEvent *pEvent = (cEvent *) pSchedule->GetEvent (EitEvent->getEventId (), EitEvent->getStartTime ());
+  cEvent *pEvent = (cEvent *) pSchedule->GetEventByTime (EitEvent->getStartTime ());
   if (!pEvent) {
     if (OnlyRunningStatus)
       return NULL;
@@ -243,7 +243,7 @@ void cEIT2::ProcessEventDescriptors(bool ExternalData, int Source, u_char Tid,
           tChannelID(Source, channel->Nid(), channel->Tid(), tsed->getReferenceServiceId()));
         if (!rSchedule)
           break;
-        rEvent = rSchedule->GetEvent(tsed->getReferenceEventId());
+        rEvent = rSchedule->GetEventById(tsed->getReferenceEventId());
         if (!rEvent)
           break;
         pEvent->SetTitle(rEvent->Title());
--- a/epghandler.c
+++ b/epghandler.c
@@ -66,10 +66,10 @@ bool cEEpgHandler::HandleEitEvent(cSchedule* Schedule,
   modified = false;
   //VDR creates new event if the EitEvent StartTime is different than EEPG time so
   //the EPG event has to be deleted but the data should be kept
-  const cEvent* ev = schedule->GetEvent(EitEvent->getEventId(),EitEvent->getStartTime());
+  const cEvent* ev = schedule->GetEventByTime(EitEvent->getStartTime());
   searchDuplicates = !ev; //if the event exist with a same start time, it is handled by SetShortText/SetDescription
   if (!ev){
-      ev = schedule->GetEvent(EitEvent->getEventId());
+      ev = schedule->GetEventById(EitEvent->getEventId());
       // remove shifted duplicates with same ID
       if (ev && ((ev->StartTime()>EitEvent->getStartTime() && ev->StartTime() < EitEvent->getStartTime()+EitEvent->getDuration())
           || (EitEvent->getStartTime() > ev->StartTime() && EitEvent->getStartTime() < ev->EndTime()))) {
--- a/equivhandler.c
+++ b/equivhandler.c
@@ -143,7 +143,7 @@ void cEquivHandler::updateEquivalent(cSchedules * Schedules, tChannelID channelI
     if (equChannel) {
       LogD(2, prep("found Equivalent channel %s"), *equChannelID.ToString());
       cSchedule *pSchedule = (cSchedule *) Schedules->GetSchedule (equChannel, true);
-      cEvent *pEqvEvent = (cEvent *) pSchedule->GetEvent (pEvent->EventID(), pEvent->StartTime());
+      cEvent *pEqvEvent = (cEvent *) pSchedule->GetEventByTime (pEvent->StartTime());
       if (pEqvEvent) {
         LogD(3, prep("equivalent event exists"));
         if (pEqvEvent == pEvent) {
--- a/util.c
+++ b/util.c
@@ -214,7 +214,7 @@ void cAddEventThread::Action(void)
       while (((*it).second->First()) != NULL) {
         cEvent* event = (*it).second->First();
 
-        cEvent *pEqvEvent = (cEvent *) schedule->GetEvent (event->EventID(), event->StartTime());
+        cEvent *pEqvEvent = (cEvent *) schedule->GetEventByTime (event->StartTime());
         if (pEqvEvent){
           (*it).second->Del(event);
         } else {
