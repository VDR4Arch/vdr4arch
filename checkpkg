#!/bin/bash
#
# checkpkg script for the vdr4arch project. Automatically executed by repo-make
# for every new package. Checks packages for common mistakes.
#
# To manually check repository, just call ./checkpkg

if [[ $1 == "--help" ]]; then
  echo "Usage: ./checkpkg [PATH]"
  exit
fi
if [[ -n $1 ]]; then
  PACKAGES=$*
else
  PACKAGES=$(find -name "*.pkg.tar.xz" -not -name "*-debug-*")
fi

echo "$PACKAGES" | while read PKG; do
  #
  # Namcap checks (optional). Some messages are filtered out for vdr4arch.
  # Only namcap *Errors* make the script return with error status.
  #
  if which namcap >/dev/null 2>/dev/null; then
    REPORT=$(namcap "$PKG" | grep -v \
      -e "E: Symlink .*fonts.* points to non-existing" \
      -e "W: Dependency included and not needed ('vdr-api')" \
      -e "W: Dependency included and not needed ('linux')" \
      -e "W: File name .* contains non standard characters" \
      -e "E: File .* is owned by .*:\(vdr\|666\|kodi\|420\)" \
      -e "E: Dependency .* detected .*/plugins/libxineliboutput-" \
      -e "xineliboutput-frontends" \
      -e "kodi-addon-graphlcd E: ELF file .* outside of a valid path" \
      -e "dkms W: File (usr/src.* exists in a non-standard directory")
    echo "$REPORT" >&2
    if grep -q 'E:' <<<"$REPORT"; then
      echo "namcap error in $PKG!" >&2
      exit 1
    fi
  else
    echo "WARNING: You should install namcap for automated package checks!" >&2
  fi

  #
  # Prepare some variables for faster access in the following checks
  #
  FILELIST=$(bsdtar -tf "$PKG");
  if [[ $? != 0 ]]; then exit 1; fi
  INSTALL=$(bsdtar -xOf "$PKG" .INSTALL 2>/dev/null)

  #
  # If we package "var/lib/vdr" then we *have to* chown it to vdr:vdr!
  #
  bsdtar --numeric-owner -tvf "$PKG" | tr -s ' ' ' ' \
    | grep -e 'var/lib/vdr' \
           -e 'srv/vdr' \
           -e 'var/cache/vdr' \
    | grep -ve '666 666' \
    | while read i; do

    NAME=$(echo ${i} | cut -d' ' -f9)
    UIDGID=$(echo ${i} | cut -d' ' -f3-4)
    if grep -q \
         -e 'var/lib/vdr' \
         -e 'srv/vdr' \
         -e 'var/cache/vdr' <<<"$NAME" &&
       ! [ ${UIDGID} = '666 666' ]; then
      echo "chown for $NAME missing in $PKG!" >&2
      exit 1
    fi
  done

  #
  # If a theme doesn't deliver its "default.theme", then we have to delete
  # the auto-generated file while installation, so VDR creates an updated one.
  #
  if grep -q '^var/lib/vdr/themes/' <<<"$FILELIST" &&
      ! grep -q '^var/lib/vdr/themes/.*-default\.theme' <<<"$FILELIST" &&
      ! grep -q 'rm -f var/lib/vdr/themes/.*-default\.theme' <<<"$INSTALL"; then
    echo "rm for default.theme missing in $PKG" >&2
    exit 1
  fi

  #
  # "Cache stuff" shouldn't be packaged
  #
  if grep -q '^var/cache/' <<<"$FILELIST"; then
    echo "Cache files shouldn't be part of $PKG!" >&2
    exit 1
  fi

  #
  # VDR plugin config file check
  #
  PLUGINLIST=$(sed -n 's#^usr/lib/vdr/plugins/libvdr-\(.*\)\.so\..*#\1#p' <<<"$FILELIST")
  if [[ -n "$PLUGINLIST" ]]; then
    while read PLUGIN; do
      PLGCFGPATH=$(grep '^etc/vdr/conf.avail/[0-9]\+-'"$PLUGIN"'.conf$' <<<"$FILELIST")
      if [[ -z "$PLGCFGPATH" ]]; then
        echo "Config file for plugin $PLUGIN missing in $PKG!" >&2
        exit 1
      fi

      PLGCFG=$(bsdtar -xOf "$PKG" "$PLGCFGPATH")
      if ! grep -q '\['"$PLUGIN"'\]' <<<"$PLGCFG"; then
        echo "Plugin name missing in config file for $PLUGIN in $PKG!" >&2
        exit 1
      fi
    done <<<"$PLUGINLIST"
  fi

  #
  # Backup array needed
  #
  PKGINFO=$(bsdtar -xOf "$PKG" .PKGINFO 2>/dev/null)
  echo $FILELIST | grep -e '^etc' -e '^var/lib/vdr' \
    | grep -v '/$' | grep -v '.theme$' \
    | grep -v '.png$' \
    | while read FILE; do

    if ! grep -q ${FILE} <<<${PKGINFO}; then
      echo "Backup entry needed for file $FILE";
      exit 1
    fi
  done
done;
